// ATTENTION: This file is auto-generated from source code. Do not edit manually!

import type { I18nTranslationTemplate } from '../models';

// This is used as a template for other translations.
// Other translations should be typed like this:
// const translation: I18nTranslation = { /* translation here */ };

// Since we allow nested objects, it is important to distinguish I18nTranslationTemplate from I18nAttributes.
// In view of this, properties declared in I18nAttributes (and those attributes might be used in future) shall not be used as a nested key.

const translation = {
  about: {
    documentations: {
      aboutUs: 'À propos',
      contact: 'Contact',
      heading: 'Documentation',
      home: 'Accueil',
      licence : 'Licence',
    },
    heading: 'À propos de LiveCodes',
    livecodes: {
      para1:
        '<1><2>LiveCodes</2></1> is an <3>open-source</3>, <4>feature-rich</4>, <5>client-side</5> code playground. Currently, <6>80+ languages/<7></7>frameworks</6> are supported. It can be used as a standalone app or can be <8>embedded</8> in any web page. There are many ways to <9>prefill playgrounds</9> with code.',
      para2:
        'A wide range of <1>configuration options</1> makes it very flexible. A powerful <2>SDK</2> (for <3>JS/TS</3>, <4>React</4>, <5>Vue</5> and <6>Svelte</6>) facilitates <7>embedding</7> and <8>communicating</8> with playgrounds. <9>Comprehensive documentations</9> are available with code samples, live demos and screenshots.',
    },
    version: {
      app: 'App version: {{APP_VERSION}}',
      appPermanentUrl: 'App URL permanente',
      commit: 'Validation Git: {{COMMIT_SHA}}',
      heading: 'Version',
      sdk: 'SDK version: {{SDK_VERSION}}',
      sdkPermanentUrl: 'SDK URL permanente',
    },
  },
  app: {
    copy: {
      hint: 'Copier (Ctrl/Cmd + A, Ctrl/Cmd + C)',
    },
    copyAsUrl: {
      hint: 'Copier le code comme URL de données',
    },
    customSettings: {
      hint: 'Paramètres personnalisés',
    },
    editorMode: {
      hint: 'Mode éditeur',
    },
    editorSettings: {
      hint: 'Paramètres de l\'éditeur',
    },
    externalResources: {
      hint: 'Ressources externes',
    },
    focus: {
      hint: 'Basculer le mode de mise au point',
    },
    format: {
      hint: 'Format (Alt + Shift + F)',
    },
    fullscreen: {
      hint: 'Plein écran',
    },
    logo: {
      title: 'LiveCodes : un éditeur de code dans le navigateur !',
    },
    projectInfo: {
      hint: 'Info sur le projet',
    },
    redo: {
      hint: 'Refaire (Ctrl/Cmd + Shift + Z)',
    },
    result: {
      hint: 'Basculer le résultat',
    },
    run: {
      hint: 'Exécuter (Shift + Enter)',
    },
    share: {
      hint: 'Partager',
    },
    undo: {
      hint: 'Défaire (Ctrl/Cmd + Z)',
    },
    untitledProject: 'Projet sans titre',
  },
  assets: {
    add: {
      dataURL: {
        desc: 'Ajouter un élément en tant que fichier codé en base64 <1>data url</1>.',
        heading: 'URL des données',
        label: 'Ajouter un fichier',
      },
      githubPages: {
        desc: 'Déployer l’actif sur les pages GitHub. Le fichier est transféré vers la branche <1>gh-pages</1> du dépôt <2>livecodes-assets</2> sur votre compte GitHub. Si le dépôt n\'existe pas déjà, un dépôt public sera créé.',
        heading: 'GitHub Pages',
        label: 'Télécharger le fichier',
      },
      heading: 'Ajouter une ressource',
    },
    delete: {
      all: 'Supprimer {{assets}} ressources?',
      one: 'Supprimer ressource: {{asset}}?',
    },
    deleteAll: 'Supprimer tout',
    generic: {
      clickToCopyURL: 'Cliquez pour copier l\'URL',
    },
    heading: 'Ressources',
    link: {
      type: 'Type: {{type}}',
      url: 'URL: {{url}}',
    },
    loadFile: {
      error: {
        failedToUpload: 'Erreur : échec de téléchargement du fichier',
        unauthenticated: 'Erreur : Utilisateur non authentifié',
      },
      upload: 'Télécharger le fichier',
      uploading: 'Téléchargement...',
    },
    noMatch: 'Aucune ressource ne correspond à ces filtres.',
    noSavedAssets: 'Vous n\'avez aucune ressource enregistrée.',
    processAsset: {
      addFile: 'Added file: ',
      deployNotice: 'The asset should be available on this URL soon (~1 min).',
      success: 'File added to assets!',
      urlLabel: 'URL: ',
    },
    resetFilters: 'Reset',
    search: 'Search',
    sort: {
      date: 'Date',
      fileName: 'File Name',
      heading: 'Sort By:',
    },
    types: {
      all: 'All types',
    },
    url: {
      fail: 'Failed to copy URL.',
      success: 'URL is copied to clipboard.',
    },
  },
  backup: {
    backup: {
      assets: 'Assets',
      button: 'Backup',
      desc: 'Backup LiveCodes data, so that it can be later restored on this or other devices. <1></1> Please visit the <2>documentations</2> for details.',
      heading: 'Backup',
      projects: 'Projects',
      settings: 'User Settings',
      snippets: 'Code Snippets',
      templates: 'User Templates',
    },
    backupBtn: 'Backup',
    error: {
      atLeastOneStore: 'Please select at least one store to backup',
      incorrectFileType: 'Error: Incorrect file type',
    },
    fileInputLabel: 'Restore from file',
    heading: 'Backup / Restore',
    inProgress: 'In progress...',
    restore: {
      desc: 'Restore previously backed-up LiveCodes data. <1></1> If you choose to replace current content, you may want to back it up first. <2></2> Please visit the <3>documentations</3> for details.',
      fromFile: 'Restore from file',
      heading: 'Restore',
      mode: {
        merge: 'Merge with current content',
        replace: 'Replace current content',
      },
      success: 'Restored Successfully!',
    },
  },
  broadcast: {
    broadcastBtn: {
      start: 'Broadcast',
      stop: 'Stop broadcast',
    },
    broadcasting: 'Broadcasting...',
    channelURL: 'Channel URL',
    connecting: 'Connecting...',
    desc: 'Broadcast the result page to other browsers/devices in real time. Please visit the <1>documentations</1> for details.',
    error: {
      generic: 'Broadcast failed!',
      serverURLRequired: 'Server URL is required!',
    },
    heading: 'Broadcast',
    includeSourceCode: 'Include source code',
    serverURL: {
      heading: 'Server URL',
    },
  },
  core: {
    broadcast: {
      heading: 'Broadcast',
      successSetToken: 'Broadcast user token set successfully',
    },
    changeLanguage: 'Loading {{lang}}. This may take a while!',
    copy: {
      copied: 'Code copied to clipboard',
      copiedAsDataURL: 'Code copied as data URL',
      hint: 'Copied!',
      title: 'Copy',
    },
    error: {
      couldNotLoadTemplate: 'Could not load template: {{template}}',
      failedToCopyCode: 'Failed to copy code',
      failedToLoadTemplate: 'Failed loading template',
      failedToLoadTemplates: 'Failed loading starter templates',
      failedToParseSettings: 'Failed parsing settings as JSON',
      invalidCommand: 'Invalid command!',
      invalidImport: 'Invalid import URL',
      invalidPanelId: 'Invalid panel id',
      invalidToken: 'Invalid token!',
      login: 'Login error!',
      logout: 'Logout error!',
      noResultContainer: 'Result container not found',
      unavailable: 'Command unavailable',
      unavailableForEmbeds: 'Command unavailable for embeds',
    },
    export: {
      gist: 'Creating a public GitHub gist...',
    },
    fork: {
      success: 'Forked as a new project',
    },
    fullScreen: {
      enter: 'Full Screen',
      exit: 'Exit Full Screen',
    },
    import: {
      loading: 'Loading Project...',
    },
    layout: {
      horizontal: 'Disposition horizontale',
      responsive: 'Disposition réactive',
      vertical: 'Disposition verticale',
    },
    loadDefaults: {
      template: 'Chargement du modèle par défaut',
    },
    login: {
      success: 'Connecté avec succès',
      successWithName: 'Connecté en tant que: {{name}}',
    },
    logout: {
      success: 'Déconnexion réussie',
    },
    result: {
      hint: 'Afficher le résultat dans une nouvelle fenêtre',
    },
    save: {
      success: 'Projet enregistré localement sur l\'appareil!',
      successWithName: 'Projet "{{name}}" enregistré localement.',
    },
    template: {
      blank: 'Projet vide',
      delete: 'Supprimer le modèle "{{item}}"?',
      javascript: 'JavaScript Starter',
      react: 'React Starter',
      saved: 'Enregistré comme nouveau modèle',
      typescript: 'TypeScript Starter',
      vue: 'Vue 3 Starter',
    },
    unload: {
      notSaved: 'Les modifications que vous avez apportées peuvent ne pas être enregistrées.',
    },
    zoom: {
      hint: 'Zoom',
    },
  },
  customSettings: {
    JSON: 'Paramètres personnalisés JSON',
    heading: 'Paramètres personnalisés',
    load: 'Charger',
  },
  deploy: {
    create: {
      desc: 'A new <1>public</1> repo will be created. The result page will be pushed to <2>gh-pages</2> branch.',
      heading: 'Create New Repo',
      repoName: 'Repo Name <1></1>',
    },
    error: {
      generic: 'Deployment failed!',
      repoNameRequired: 'Repo name is required',
    },
    existing: {
      desc: 'A new commit will be added to <1>gh-pages</1> branch.',
      heading: 'Existing Repo',
      repoName: 'Repo Name',
    },
    generic: {
      commitMessage: 'Commit Message',
      commitSourceCodePublic: 'Commit source code (public)',
      deployBtn: 'Deploy',
      deploying: 'Deploying...',
    },
    heading: 'Deploy to GitHub Pages',
    searchRepo: 'Search your public repos...',
  },
  editorSettings: {
    appLanguage: {
      heading: 'Langue de l\'interface utilisateur',
      note: 'Recharge l\'application pour appliquer les modifications après avoir changé de langue.',
    },
    closeBrackets: 'Fermeture automatique des crochets et des guillemets',
    codeJarDesc: '* Les fonctionnalités marquées ne sont pas disponibles dans CodeJar.',
    default: 'Par défaut',
    desc: 'Veuillez vérifier la <1>documentation</1> pour plus de détails.',
    editor: {
      codejar: 'CodeJar',
      codemirror: 'CodeMirror',
      heading: 'Éditeur',
      monaco: 'Monaco',
    },
    editorMode: {
      emacs: 'Emacs',
      heading: 'Mode éditeur *',
      vim: 'Vim',
    },
    editorTheme: 'Thème de l\'éditeur',
    emmet: 'Activer Emmet *',
    enableAI: {
      heading: 'Activer l\'assistant de code IA',
      note: 'Powered by <1><2></2></1>',
    },
    fontFamily: 'Famille de polices',
    fontSize: 'Taille de la police',
    format: 'Format',
    heading: 'Paramètres de l\'éditeur',
    lineNumbers: 'Afficher les numéros de ligne',
    notAvailableInCodeJar: 'Non disponible dans CodeJar',
    preview: 'Aperçu',
    semicolons: 'Format: Utiliser des points-virgules',
    singleQuote: 'Format: Utiliser des guillemets simples',
    tabSize: 'Taille de tabulation',
    theme: 'Mode sombre',
    trailingComma: 'Format: Utilisez des virgules de fin',
    useTabs: {
      heading: 'Indentations',
      spaces: 'Espaces',
      tabs: 'Tabulations',
    },
    wordWrap: 'Retour à la ligne',
  },
  embed: {
    activeEditor: {
      heading: 'Éditeur actif',
      markup: '{{markup}}',
      script: '{{script}}',
      style: '{{style}}',
    },
    activeTool: {
      compiled: 'Compilé',
      console: 'Console',
      heading: 'Outil actif',
      tests: 'Tests',
    },
    code: {
      copy: 'Copier le code',
      heading: 'Code',
    },
    desc: 'Veuillez vérifier la <1>documentation</1> pour les configurations avancées.',
    embedType: {
      cdn: 'Script (CDN)',
      heading: 'Type d\'intégration',
      html: 'HTML',
      iframe: 'Iframe',
      npm: 'JS (npm)',
      react: 'React',
      svelte: 'Svelte',
      vue: 'Vue',
    },
    heading: 'Projet intégré',
    lite: 'Mode simplifié',
    loading: {
      click: 'Au clic',
      eager: 'Anticipé',
      heading: 'Chargement',
      lazy: 'Différé.',
    },
    mode: {
      codeblock: 'Code Block',
      editor: 'Editor',
      full: 'Full',
      heading: 'Mode d\'affichage',
      result: 'Résultat',
    },
    permanentUrl: 'URL Permanent',
    preview: 'Aperçu',
    previewLoading: 'Chargement de l\'aperçu...',
    readonly: 'Lecture seule',
    theme: {
      dark: 'Sombre',
      heading: 'Thème',
      light: 'Clair',
    },
    tools: {
      closed: 'Fermé',
      full: 'Complet',
      heading: 'Outils',
      none: 'Aucun',
      open: 'Ouvrir',
    },
    view: {
      editor: 'Éditeur',
      heading: 'Vue par défaut',
      result: 'Résultat',
      split: 'Scinder',
    },
  },
  generic: {
    about: {
      blog: 'Blog',
      configuration: 'Configuration',
      features: 'Caractéristiques',
      gettingStarted: 'Mise en route',
      github: 'GitHub',
      sdk: 'SDK',
      sponsor: 'Parrainer',
      twitter: '𝕏 / Twitter',
    },
    clickForInfo: 'Cliquez pour info...',
    close: 'Fermer',
    error: {
      authentication: 'Erreur d\'authentification !',
      exceededSize: 'Erreur: taille dépassée {{size}} MB',
      failedToReadFile: 'Erreur: impossible de lire le fichier',
    },
    loading: 'Chargement...',
    more: 'Plus...',
    optional: 'Facultatif',
    required: 'Requis',
  },
  import: {
    bulk: {
      desc: 'Importez en masse plusieurs projets dans vos projets enregistrés. Les projets peuvent être exportés depuis l\'écran <1>Projets enregistrés</1>.',
      fromFile: 'Importation groupée depuis un fichier local',
      fromURL: 'Importation groupée depuis un URL',
      heading: 'Importation groupée',
      started: 'Importation groupée a démarré...',
    },
    code: {
      desc: 'Sources prises en charge: <1> <2>GitHub gist</2> <3>GitHub file</3> <4>Directory in a GitHub repo</4> <5>Gitlab snippet</5> <6>Gitlab file</6> <7>Directory in a Gitlab repo</7> <8>JS Bin</8> <9>Raw code</9> <10>Code in web page DOM</10> <11>Code in zip file</11> <12>Official playgrounds<13></13>(TypeScript, Vue and Svelte)</12> </1> Please visit the <14>documentations</14> for details.',
      fromFile: 'Importer des fichiers locaux',
      fromURL: 'Importer depuis une URL',
      heading: 'Importer code',
    },
    error: {
      failedToLoadURL: 'Erreur: échec du chargement de l\'URL',
      invalidConfigFile: 'Fichier de configuration non valide',
      invalidFile: 'Erreur: fichier non valide',
    },
    generic: {
      file: 'Fichier local',
      url: 'URL',
    },
    heading: 'Importer',
    json: {
      desc: 'Import a single project JSON to editor. A project can be exported from app&nbsp;menu&nbsp;→ Export&nbsp;→ Export&nbsp;Project&nbsp;(JSON).',
      fromFile: 'Import project from local file',
      fromURL: 'Import project from URL',
      heading: 'Import Project JSON',
    },
    success: 'Import Successful!',
  },
  login: {
    accessAllowed: 'Autoriser l\'accès à:',
    desc: '<1>En vous connectant, vous acceptez que des <2>cookies</2> peuvent être stockés sur votre appareil.</1> <3> <4>Pourquoi ces autorisations sont-elles nécessaires ?</4> </3> <5> <6>Comment modifier/révoquer les autorisations ?</6> </5>',
    gist: 'Gists',
    heading: 'Connectez-vous avec GitHub',
    loginAs: 'Connecté en tant que {{name}}',
    loginBtn: 'Se connecter',
    logout: 'Se déconnecter',
    privateRepo: 'Dépôts privés',
    publicRepo: 'Dépôts',
  },
  menu: {
    about: 'À propos',
    assets: 'Assets …',
    autoSave: 'Auto Save',
    autoUpdate: 'Auto Update',
    backup: 'Backup / Restore …',
    broadcast: 'Broadcast …',
    customSettings: 'Custom Settings …',
    delay: {
      heading: 'Delay: <1>1.5</1>s',
      hint: 'Delay before auto-update',
    },
    deploy: 'Déployer …',
    editorSettings: 'Paramètres de l\'éditeur …',
    embed: 'Intégrer …',
    export: {
      codepen: 'Edit in CodePen',
      gist: 'Export to GitHub Gist',
      heading: 'Export',
      jsfiddle: 'Edit in JSFiddle',
      json: 'Export Project (JSON)',
      result: 'Export Result (HTML)',
      src: 'Export Source (ZIP)',
    },
    formatOnsave: 'Format On-save',
    import: 'Import …',
    layout: 'Vertical Layout',
    login: 'Login …',
    logout: 'Log out',
    new: 'New …',
    open: 'Open …',
    project: 'Project Info …',
    recoverUnsaved: 'Recover Unsaved',
    resources: 'External Resources …',
    save: 'Save',
    saveAs: {
      fork: 'Fork (New Project)',
      heading: 'Save as',
      template: 'Template',
    },
    share: 'Share …',
    showSpacing: {
      heading: 'Show Spacing',
      hint: 'Press Alt/Option and move your cursor over result page',
    },
    snippets: 'Code Snippets …',
    sync: 'Sync (beta) … <1> ⏳</1>',
    theme: 'Dark Theme',
    welcome: {
      heading: 'Welcome …',
      hint: 'Show Welcome screen on startup',
    },
  },
  open: {
    defaultTemplate: 'Default template ',
    delete: {
      all: 'Delete {{projects}} projects?',
      deleting: 'Deleting projects...',
      one: 'Delete project: {{project}}?',
    },
    deleteAll: 'Delete All',
    exportAll: 'Export All',
    filter: {
      language: 'filter by language',
      tag: 'filter by tag',
    },
    heading: 'Saved Projects',
    import: 'Import',
    lastModified: 'Last modified: {{modified}}',
    noData: {
      desc: 'You can save a project from (settings&nbsp;menu&nbsp;&gt;&nbsp;Save) or by the keyboard shortcut (Ctrl/Cmd&nbsp;+&nbsp;S).',
      heading: 'You have no saved projects.',
    },
    noMatch: 'No projects match these filters.',
    placeholder: {
      allLanguages: 'All languages',
      filterByTags: 'Filter by tags',
      search: 'Search',
    },
    removeDefault: '(unset)',
    reset: 'Reset',
    setAsDefault: 'Set as default',
    sort: {
      heading: 'Sort By:',
      lastModified: 'Last Modified',
      title: 'Title',
    },
  },
  project: {
    desc: 'Description',
    head: 'Add to &lt;head&gt;',
    heading: 'Project Info',
    htmlAttr: 'Attributes for &lt;html&gt;',
    tags: 'Tags',
    title: 'Project Title',
  },
  recoverPrompt: {
    desc: 'Your last project has unsaved changes!',
    heading: 'Recover unsaved project?',
    meta: 'Title: <1></1> <2></2> Last modified: <3></3>',
    notShowAgain: 'Do not show this again.',
    prompt: {
      discard: 'Discard unsaved project',
      heading: '<1></1>Do you want to recover it now?',
      recover: 'Recover project to editor',
      save: 'Save to device and continue',
    },
  },
  resources: {
    browseOnJsDelivr: 'Browse package files on jsDelivr',
    cssPresets: {
      heading: 'CSS Presets',
      none: 'None',
      normalizeCss: 'Normalize.css',
      resetCss: 'Reset CSS',
    },
    error: {
      failedToLoadResults: 'Failed to load results!',
      noResultsFound: 'No results found for: ',
    },
    fonts: {
      add: 'Add',
      heading: 'Fonts <1>(powered by Google Fonts)</1>',
      select: 'Select font ...',
    },
    heading: 'External Resources',
    scripts: 'External Scripts',
    search: {
      heading: 'Search Packages <1>(powered by jsDelivr)</1>',
      placeholder: 'e.g. jquery, lodash@4, bootstrap@5.2.3, ...',
    },
    stylesheets: 'External Stylesheets',
    urlDesc: "Add stylesheet/script URLs and click 'Load'. Each URL should be in a separate line.",
  },
  savePrompt: {
    heading: 'Unsaved changes',
    prompt: {
      cancel: 'Cancel',
      discard: 'Do not save',
      heading: 'The changes you made may not be saved. <1></1> Do you want to save now?',
      save: 'Save',
    },
  },
  share: {
    characters: '{{urlLength}} characters',
    copy: {
      clickToCopy: 'Click to copy',
      copied: 'URL copied to clipboard',
    },
    encodedURL: 'Get encoded URL',
    error: {
      failedToCopy: 'Copy to clipboard failed!',
      failedToGenerateURL: 'Failed to generate short URL!',
    },
    expireInOneYear: 'Expires in 1 year',
    generateURL: 'Generating URL …',
    heading: 'Share',
    permanentURL: 'Permanent URL',
    qrcode: {
      clickToDownload: 'Click to download',
      generating: 'Generating...',
    },
    services: {
      copyUrl: 'Copy URL',
      devTo: 'Dev.to',
      email: 'Email',
      facebook: 'Facebook',
      hackerNews: 'Hacker News',
      linkedIn: 'LinkedIn',
      pinterest: 'Pinterest',
      pocket: 'Pocket',
      qrCode: 'QR code',
      reddit: 'Reddit',
      share: 'Share via …',
      telegram: 'Telegram',
      tumblr: 'Tumblr',
      twitter: '𝕏 / Twitter',
      whatsApp: 'WhatsApp',
    },
    shortURL: 'Get short URL',
  },
  snippets: {
    action: {
      copy: 'Copy',
      delete: 'Delete',
      edit: 'Edit',
    },
    add: {
      code: 'Code',
      desc: 'Description',
      heading: 'Add Snippet',
      language: 'Language',
      save: 'Save',
      snippets: 'Snippets',
      title: 'Title',
    },
    copy: {
      clickToCopySnippet: 'Click to copy snippet',
      copied: 'Snippet is copied to clipboard.',
    },
    delete: {
      all: 'Delete {{snippets}} snippets?',
      one: 'Delete snippet: {{snippet}}?',
    },
    deleteAll: 'Delete All',
    error: {
      failedToCopy: 'Failed to copy URL.',
      noTitle: 'Please add snippet title.',
    },
    filter: {
      language: 'filter by language',
    },
    heading: 'Code Snippets',
    lastModified: 'Last modified: {{modified}}',
    noMatch: 'No snippets match these filters.',
    noSavedSnippets: 'You have no saved snippets.',
    placeholder: {
      allLanguages: 'All languages',
      search: 'Search',
    },
    reset: 'Reset',
    save: {
      success: 'Snippet locally saved to device!',
    },
    sort: {
      date: 'Date',
      heading: 'Sort By:',
      title: 'Title',
    },
    text: 'Plain Text',
  },
  splash: {
    loading: 'Loading LiveCodes…',
  },
  sync: {
    autoSync: 'Auto sync',
    create: {
      desc: 'A new <1>private</1> repo will be created. Your LiveCodes local data will be synchronized with <2>main</2> branch.',
      heading: 'Create New Repo',
      repoName: 'Repo Name',
    },
    error: {
      generic: 'Sync failed!',
      repoNameRequired: 'Repo name is required',
    },
    existing: {
      desc: 'Your LiveCodes local data will be synchronized with <1>main</1> branch.',
      heading: 'Existing Repo',
      repoName: 'Repo Name',
    },
    heading: 'Synchroniser avec le dépôt GitHub',
    searchRepos: 'Search your repos...',
    success: 'Synchronisation terminée!',
    syncBtn: 'Synchroniser',
    syncInProgress: 'Synchronisation en cours...',
    syncStarted: 'Synchronisation démarrée...',
  },
  templates: {
    heading: 'New Project',
    noUserTemplates: {
      desc: 'You can save a project as a template from <1></1>(App&nbsp;menu&nbsp;&gt;&nbsp;Save&nbsp;as&nbsp;&gt; Template).',
      heading: 'You have no saved templates.',
    },
    starter: {
      angular: 'Angular Starter',
      assemblyscript: 'AssemblyScript Starter',
      astro: 'Astro Starter',
      backbone: 'Backbone Starter',
      blank: 'Blank Project',
      blockly: 'Blockly Starter',
      bootstrap: 'Bootstrap Starter',
      civet: 'Civet Starter',
      clio: 'Clio Starter',
      clojurescript: 'ClojureScript Starter',
      coffeescript: 'CoffeeScript Starter',
      commonlisp: 'Common Lisp Starter',
      cpp: 'C++ Starter',
      diagrams: 'Diagrams Starter',
      fennel: 'Fennel Starter',
      gleam: 'Gleam Starter',
      go: 'Go Starter',
      heading: 'Starter Templates',
      imba: 'Imba Starter',
      javascript: 'JavaScript Starter',
      jest: 'Jest Starter',
      'jest-react': 'Jest/React Starter',
      jquery: 'jQuery Starter',
      julia: 'Julia Starter',
      knockout: 'Knockout Starter',
      lit: 'Lit Starter',
      livescript: 'LiveScript Starter',
      loading: 'Loading starter templates...',
      lua: 'Lua Starter',
      'lua-wasm': 'Lua (Wasm) Starter',
      malina: 'Malina.js Starter',
      markdown: 'Markdown Starter',
      mdx: 'MDX Starter',
      ocaml: 'Ocaml Starter',
      perl: 'Perl Starter',
      php: 'PHP Starter',
      'php-wasm': 'PHP (Wasm) Starter',
      postgresql: 'PostgreSQL Starter',
      preact: 'Preact Starter',
      prolog: 'Prolog Starter',
      python: 'Python Starter',
      r: 'R Starter',
      react: 'React Starter',
      'react-native': 'React Native Starter',
      reason: 'Reason Starter',
      rescript: 'ReScript Starter',
      riot: 'Riot.js Starter',
      ruby: 'Ruby Starter',
      'ruby-wasm': 'Ruby (Wasm) Starter',
      scheme: 'Scheme Starter',
      solid: 'Solid Starter',
      sql: 'SQL Starter',
      stencil: 'Stencil Starter',
      svelte: 'Svelte Starter',
      tailwindcss: 'Tailwind CSS Starter',
      tcl: 'Tcl Starter',
      teal: 'Teal Starter',
      typescript: 'TypeScript Starter',
      vue: 'Vue 3 SFC Starter',
      vue2: 'Vue 2 Starter',
      wat: 'WebAssembly Text Starter',
    },
    user: {
      heading: 'Mes modèles',
      loading: 'Chargement des modèles d\'utilisateur...',
    },
  },
  testEditor: {
    heading: 'Éditer les Tests',
    load: 'Exécuter',
    tests: 'Tests',
  },
  toolspane: {
    close: 'Fermer',
    compiled: {
      title: 'Compilé',
    },
    console: {
      clear: 'Effacer console',
      title: 'Console',
    },
    test: {
      edit: 'Éditer',
      error: '<1><2>Erreur de test!</2></1>',
      loading: '<1>Chargement des tests...</1>',
      noTest: '<1>Aucun test pour ce projet!</1>',
      reset: 'Réinitialiser',
      run: {
        desc: 'Ctrl/Cmd + Alt + T',
        heading: 'Exécuter',
      },
      summary: {
        desc: 'Tests: {{failed}}\n       {{passed}}\n       {{skipped}}\n       {{total}}<1></1>\nTime: {{duration}}s',
        failed: '{{failedNum}} failed',
        passed: '{{passedNum}} passed',
        skipped: '{{skippedNum}} skipped',
        total: '{{totalNum}} total',
      },
      title: 'Tests',
      watch: {
        desc: 'Exécuter des tests lorsque le code change',
        heading: 'Voir',
      },
    },
  },
  welcome: {
    about: {
      documentation: 'Documentation',
      heading: 'À propos de LiveCodes',
    },
    heading: 'Bienvenue',
    recent: {
      heading: 'Récent',
    },
    recover: {
      cancel: 'Annuler',
      heading: 'Récupération',
      lastModified: 'Dernière modification: <1></1>',
      recover: 'Récupérer',
      save: 'Sauvegarder',
      unsavedChanges: 'Votre dernier projet comportait des modifications non enregistrées:',
    },
    showOnStartup: 'Afficher au démarrage',
    start: {
      heading: 'Démarrer',
      import: 'Importer...',
      loadDefaultTemplate: 'Charger le modèle par défaut',
      new: 'New...',
      noDefaultTemplate: 'Aucun modèle par défaut',
      open: 'Ouvrir...',
    },
    templates: {
      heading: 'Modèles de démarrage',
    },
  },
} as const satisfies I18nTranslationTemplate;

export default translation;
